/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 12, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "upsertTranslation_test.hpp"

const std::string CREATE_EXAMPLE {
    R"(
        {
            "offset": 5,
            "type": "create",
            "version": 1,
            "context": "translation",
            "resource": "WT-3",
            "payload": {
                "target": "windows",
                "source": {
                "vendor": "^The Apache Software",
                "product": "^Apache Tomcat.*",
                "version": ""
                },
                "translation": [{
                "vendor": "apache",
                "product": "tomcat",
                "version": ""
                }],
                "action": [
                    0,
                    1
                ]
            }
        }
    )"};

const std::string UPDATE_EXAMPLE {
    R"(
        {
            "resource": "WT-1",
            "type": "update",
            "operations": [
                {
                "op": "replace",
                "path": "/source/product",
                "value": "Microsoft Edge Browser"
                },
                {
                "op": "replace",
                "path": "/source/vendor",
                "value": "Microsoft"
                }
            ]
        }
    )"};

const std::string EMPTY_DATA_EXAMPLE {
    R"(
        {
        }
    )"};

const std::string NO_RESOURCE_EXAMPLE {
    R"(
        {
            "type": "update",
            "operations": [
                {
                "op": "replace",
                "path": "/source/product/",
                "value": "Microsoft Edge Browser"
                },
                {
                "op": "replace",
                "path": "/source/vendor/",
                "value": "Microsoft"
                }
            ]
        }
    )"};

const std::string NO_TYPE_EXAMPLE {
    R"(
        {
            "resource": "WT-1",
            "operations": [
                {
                "op": "replace",
                "path": "/source/product/",
                "value": "Microsoft Edge Browser"
                },
                {
                "op": "replace",
                "path": "/source/vendor/",
                "value": "Microsoft"
                }
            ]
        }
    )"};

const std::string INVALID_TYPE_EXAMPLE {
    R"(
        {
            "resource": "WT-1",
            "type": "modify",
            "operations": [
                {
                "op": "replace",
                "path": "/source/product/",
                "value": "Microsoft Edge Browser"
                },
                {
                "op": "replace",
                "path": "/source/vendor/",
                "value": "Microsoft"
                }
            ]
        }
    )"};

TEST_F(UpsertTranslationTest, EmptyData)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(EMPTY_DATA_EXAMPLE);

    try
    {
        UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), R"(Invalid data format. Missing "type" or "resource" key.)");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(UpsertTranslationTest, NoResource)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(NO_RESOURCE_EXAMPLE);

    try
    {
        UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), R"(Invalid data format. Missing "type" or "resource" key.)");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(UpsertTranslationTest, NoType)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(NO_TYPE_EXAMPLE);

    try
    {
        UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), R"(Invalid data format. Missing "type" or "resource" key.)");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(UpsertTranslationTest, InvalidType)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json upsertExampleJSON = nlohmann::json::parse(INVALID_TYPE_EXAMPLE);

    try
    {
        UpsertTranslation::upsertTranslationEntry(upsertExampleJSON, rocksDbWrapper);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid operation type: modify for WT-1");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(UpsertTranslationTest, UpdateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Update Wazuh translation entry.
    nlohmann::json updateExampleJSON = nlohmann::json::parse(UPDATE_EXAMPLE);
    UpsertTranslation::upsertTranslationEntry(updateExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-1", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendor = translationEntry->source()->vendor();
    auto* sProduct = translationEntry->source()->product();
    auto* sVersion = translationEntry->source()->version();
    auto* translationArray = translationEntry->translation();
    auto* tVendor = translationArray->Get(0)->vendor();
    auto* tProduct = translationArray->Get(0)->product();
    auto* tVersion = translationArray->Get(0)->version();

    EXPECT_EQ(sVendor->str(), "Microsoft");
    EXPECT_EQ(sProduct->str(), "Microsoft Edge Browser");
    EXPECT_EQ(sVersion->size(), 0);
    EXPECT_EQ(tVendor->str(), "microsoft");
    EXPECT_EQ(tProduct->str(), "edge_chromium");
    EXPECT_EQ(tVersion->str(), "");
}

TEST_F(UpsertTranslationTest, CreateTranslationEntrySuccess)
{
    // Create rocksdb wrapper instance.
    Utils::RocksDBWrapper rocksDbWrapper(TRANSLATION_DATABASE_PATH);

    // Create Wazuh translation entry.
    nlohmann::json createExampleJSON = nlohmann::json::parse(CREATE_EXAMPLE);
    UpsertTranslation::upsertTranslationEntry(createExampleJSON, rocksDbWrapper);

    // Read from rocksdb database.
    std::string translationEntryStr;
    rocksDbWrapper.get("WT-3", translationEntryStr);
    ASSERT_EQ(translationEntryStr.empty(), false);

    // Parse flatbuffer
    const NSVulnerabilityScanner::TranslationEntry* translationEntry =
        NSVulnerabilityScanner::GetTranslationEntry(translationEntryStr.c_str());
    EXPECT_EQ(translationEntry->target()->str(), "windows");

    auto sVendor = translationEntry->source()->vendor();
    auto* sProduct = translationEntry->source()->product();
    auto* sVersion = translationEntry->source()->version();
    auto* translationArray = translationEntry->translation();
    auto* tVendor = translationArray->Get(0)->vendor();
    auto* tProduct = translationArray->Get(0)->product();
    auto* tVersion = translationArray->Get(0)->version();

    EXPECT_EQ(sVendor->str(), "^The Apache Software");
    EXPECT_EQ(sProduct->str(), "^Apache Tomcat.*");
    EXPECT_EQ(sVersion->size(), 0);
    EXPECT_EQ(tVendor->str(), "apache");
    EXPECT_EQ(tProduct->str(), "tomcat");
    EXPECT_EQ(tVersion->str(), "");
}
